XDI/MVS

The Supplement of CA-Xcom/MVS


The Solution of Combined Xcom-Dispatch Application for Report
Distribution Management System



SYSDOC and USER's GUIDE





Deru Sudibyo
Technical Consultant
OS/390 Solution






Chapter 1.  INTRODUCTION                          5

Chapter 2.  LOGIC DESIGN and ARCHITECTURE        17

Chapter 3.  PROGRAM DOCUMENTATION                28

Chapter 4.  INSTALLATION                         36

Chapter 5.  CUSTOMIZATION                        39

Chapter 6.  XDI PARAMETERS                       47

Chapter 7.  XDI COMMANDS                         49

Chapter 8.  XDI MESSAGES                         55






Table of Contents

CHAPTER 1:  INTRODUCTION                          5
1.1.  THE STORY OF THE BORN OF XDI                5
1.2.  XDI IS A SYSTEMS PROGRAMMING SOLUTION       6

PART-I:  SYSTEM DOCUMENTATION                     8

CHAPTER 2:  LOGIC DESIGN AND ARCHITECTURE         9
2.1.  CONFIGURATION                              10
2.2.  FUNCTIONS                                  12
2.3.  OPERATION LOGIC                            13
2.3.1.  Operating Environment                    13
2.3.2.  Steps of Work                            13
2.3.3.  Global Main Logic Flow                   16
2.3.4.  I/O Preparation Logic Flow               17

CHAPTER 3:  PROGRAM DOCUMENTATION                18

3.1.  XDI PROGRAM MODULES                        18
DERXDI - XDI MAIN MODULE                         18
DERXDP - XDI PARAMETER INITIALIZER               18
DERXIO - XDI I/O PREPARATION ROUTINE             18
DERXDS - XDI SYSOUT REQUEUE DRIVER ROUTINE       19
DERXSF - XDI SEND FILE (SF) COMMAND PROCESSOR    19
DERWTR - XDI OUTPUT WRITER ROUTINE               19
DERWTB - XDI OUTPUT WRITER ROUTINE               19
DERWTG - XDI SYSOUT DESTROYER ROUTINE            19
DERWSA - XDI WORKING STORAGE AREA                20
DERWTX - XDI EXTENDED WORKING STORAGE AREA       20
DERDCB - XDI SET OF DATA CONTROL BLOCKS          20
DERMSG - XDI SET OF MESSAGES                     20

3.2.  XDI MACROS                                                  21

3.2.1.  XDI Outer Macros                                          21

@AMODE MACRO - SWITCH ADDRESSING MODE                             21
@DYNAMIC MACRO - DYNAMIC DATA ALLOCATION/DEALLOCATION             21
@EDITDSN MACRO - EDIT DATASET NAME                                22
@EDITHDR MACRO - EDIT DISPATCH/PC-FORMATTED REPORT PAGE HEADER    22
@EDITTOD MACRO - OBTAIN AND EDIT TOD DATE AND TIME                23
@EXIT MACRO - MODULE SECTION EXIT ROUTINE                         23
@FLATDS MACRO - DEFINE FLAT DATASET FILE                          23
@MESSAGE MACRO - ISSUE XDI VARIABLE MESSAGE                       23
@PROLOG MACRO - MODULE ENTRY PROLOG                               24
@SYSOUT MACRO - DEFINE SYSOUT FILE                                24
@VDATA MACRO - BUILD GLOBALLY DECLARED DATA                       24
@VGLOBAL MACRO - DECLARE GLOBAL VARIABLES                         25
@WTO MACRO - ISSUE XDI FIXED MESSAGE                              25
@XCOMJOB MACRO - BUILD OR UPDATE XJOB JOB                         25

3.2.2.  XDI Inner Macros                                          26


PART-II:  USER'S GUIDE                           28

CHAPTER 4:  INSTALLATION                         29
4.1.  XDI CATALOGED PROCEDURE                    30
4.2.  XDI LIBRARIES                              31
4.3.  JCLS FOR SYSGEN AND MAINTENANCE            31
4.3.1.  ASSEMBLE Procedure                       31
4.3.2.  JDIGEN Job                               32
4.3.3.  JWTX Job                                 35

CHAPTER 5:  CUSTOMIZATION                        36
5.1. WTX PARAMETERS                              36
5.1.1.  Type, AMODE and RMODE                    36
5.1.2.  JES=Primary-JES-name                     37
5.1.3.  Flat File (Transition File) Parameters   37
5.1.4.  Xcom Job JCL Parameters                  37
5.2.  APPLYING WTX CHANGES                       38

CHAPTER 6:  XDI PARAMETERS                       39
6.1.  XDISYSMM - XDI SYSTEM PARAMETER            39
6.1.1. Syntax and Rules                          39
6.1.2. CLASS=Class-list                          40
6.1.3.  RQCLASS=Class                            40
6.1.4.  PCFORM=[WINDOWS|DISPATCH|S/390]          40
6.1.5.  TRACE=[ON|OFF]                           40
6.1.6. DISP= and HOLD= are not Supported yet     40
6.1.7.  XDISP=[KEEP|DELETE]                      41
6.1.8.  LRECL=[NORMAL|ASIS]                      41
6.1.9.  XPARM=Xcom-job-parameter                 41
6.1.10.  TABLE=nn                                42
6.1.11.  PCDRIVE=PC-drive-letter                 42
6.1.12.  STEPLIB=Steplib-file and CAILIB=Cailib-file  42
6.1.13.  PARMLIB=Parmlib-file                    42
6.1.14.  RESTLIB=Restlib-file                    42
6.1.15.  GLOBLIB=Globlib-file                    42
6.1.16.  Example of XDISYS00                     43
6.2.  XDITABNN - XDI DESTINATION TABLE           43
6.2.1.  Syntax and Rules                         43
6.2.2.  Example of XDITAB00                      44
6.3.  XDI DESTINATION MEMBERS                    44
6.3.1.  Syntax and Rules                         44
6.3.2.  Passing MVS or JES Commands              44
6.3.3.  Override XDISYS Parameters               45
6.3.4.  Example of XDI Destination Member        45

CHAPTER 7:  XDI COMMANDS                         46
7.1.  LIST COMMAND                               46
7.2.  FILE=MM COMMAND                            46
7.3. XDISYS KEYWORD COMMANDS                     46
7.4.  SF (SEND_FILE) COMMAND                     47

CHAPTER 8:  XDI MESSAGES                         48
8.1.  VARIABLE TEXT MESSAGES                     48
8.2.  FIXED TEXT MESSAGES                        50




Chapter 1
INTRODUCTION


XDI born because of a special requirement came from one of CA
customer, BII.  She wanted to establish Report Distribution
Management System (RDMS) using CA-Dispatch.   Distribution is
performed explicitly broadcast all reports from Data Center (MVS
system) to all Branch Offices (PC/Windows).  By the time, because
in SNA environment, LU type 2 is the only way Dispatch download
reports to PC, she felt too slow.  Unfortunately, RTC (part of
CA-Dispatch/PC) was also not very good tool.


1.1.  The Story of the Born of XDI

BII then asked for alternative solution, at least such utility to
replace CA-Dispatch download function.  CA account manager
offered Xcom.  Based on functions and features described in Xcom
brochure, she then decided to use Xcom to replace CAICCI and RTC
parts of Dispatch.  Unfortunately, CA-Xcom is not a part of
Dispatch.  Of course, Xcom faster because of LU type 6.2.  But it
is not designed to support Dispatch.  Thus, no way to put Xcom in
the position of CCI and RTC which is operated by CA-Dispatch
without human intervention. The crowded situation, by the time,
can be described as follow:

? To void CCI and RTC, route Dispatch output to spool is the only
  way.  Xcom then take them as input to be transferred to the right
  recipient specified in its DESTination name.

? Since reports will be kept as PC files by each Branch Office,
  PC file name must represent report name.

? Specify external writer name as report name to each Dispatch
  output is the only way to pass report name to spool.

? Since Xcom spool transfer function uses external writer name as
  routing criterion, thus, external writer name must represent
  destination.  And since each Branch Office designed as a single
  recipient, external writer name must be unique for each Branch
  Office.  Unfortunately, external writer name can not represent
  recipient name and report name at the same time.

? Since Xcom spool transfer assumed as spool to spool data
  transfer, no such information represent the content of
  transferred report carried over the network.  Hence, no way to
  convert received report (in Branch Office) in to PC file with the
  right file name.

? Since Xcom doesn't support checkpoint recovery for spool
  transfer, client become disappoints and complains us to provide
  this feature.

All of the above reason forced us to do something in systems
programming area instead of just playing around administrative
area.  XDI is the result of this survives, and so far is the only
acceptable solution for a while.


1.2.  XDI is A Systems Programming Solution

Systems programming solution is the highest and the most critical
solution ever made in the IT plant.  It must be the last
alternative.  XDI is one of such seldom solution.  Unless it
taken by software industry, no body can guaranty its lifetime.
Therefore, strongly recommended users to keep its source codes
and documents in very safe place using very safe method.

The idea of XDI design came from the weakness point of Xcom.  In
standard application, Xcom provides 3 data transfer functions as
shown in figure 1.  All three are separated path each other.
Filesystem is the only target for dataset or file transfer
function.  JES or other job-entry is the only target for job
transfer function.  Spool is the only target for report transfer
function.

Figure 1: Three data transfer functions provided by Xcom standard.


The needs, sometimes in fact, out of standard.  Like in BII, Xcom
is needed to support Dispatch application, especially its speed
and check point recovery feature.  Unfortunately, standard Xcom
does not satisfied, since remote spool is the only target for
report transfer.  Client needs transferred reports from Dispatch
(MVS) to be filed by each remote system (Windows NT) with
representative file name.

To satisfy the above needs, systems programming is the only
solution.  Modify Dispatch or Xcom is impossible.  Developing an
independent program like XDI is then the only chance to provide
solution.  Now XDI is ready and is being used by BII, even though
it needs to be evaluated further.

With XDI, Xcom report transfer function becomes more flexible.
Now report can be transferred in 2 ways, 'spool to spool' as a
standard Xcom way and 'spool to Filesystem' as an additional way.
Figure 2 shows how XDI enhances Xcom.


Figure 2:  With XDI, report can be transferred using dataset
transfer function.


Of course, we don't want spend around 5 weeks to codes 14
assembly modules and 33 macros only for one client.  That why XDI
was made as a parameterized program to void local dependency with
certain customer as much as possible.  It does not also dependent
to Dispatch or any other program except Xcom.




Part-I

SYSTEM DOCUMENTATION



Chapter 2
LOGIC DESIGN And ARCHITECTURE


Even though XDI is stand for "Xcom Dispatch Interface", it is
actually nothing to do with Dispatch.  XDI takes input (SYSOUT
datasets) from JES spool with certain criterion.  Sysout then
converted into flat dataset with 3 possible formats, original VBA
or VBM format, Dispatch format or Windows format.  XDI then
create Xcom-batch-job with LFILE (local file) parameter point to
that flat dataset, and submit it to Xcom server.   Regarding the
above mechanism, XDI is more as an Xcom Supplement instead of
Xcom Dispatch Interface.  Its main function is to support Xcom
transfer report using advantaged rule of which usually used for
flat file.

Figure 3:  XDI is an Xcom Supplement to Transfer Report using
Flat File Rule.


XDI is also parameterized program.  Sysout files selection
criterion, spool class for work, Xcom output format, Xcom job I/O
configuration, recipient table and recipient to LU dictionary are
specified in XDI parameter library and can be modified any time
interactively.

2.1.  Configuration

As mentioned in chapter 1, XDI was made as common as possible.
To void such local dependency with certain user, it was designed
as a parameterized program like Xcom, Dispatch and so forth.  As
an independent program, although it is an Xcom supplement,
installation of XDI needs not any changes in Xcom site.



Figure 4:  XDI is a parameterized independent program.


Currently, XDI supports Xcom for MVS only, which communicates
with Xcom in Windows, Windows NT or DOS.  It possible to be
developed to support Xcom for VM system.


XDI Support in VM System

To make XDI run under VM system, main module DERXDI and
subroutine DERXDS and DERXIO must be redeveloped.  IEFSSREQ call
mechanism must be changed to hypervisor call of diagnose code
X'014'.  Since there is no JES in VM system, Xcom job submission
will no longer needed. It should be changed to subtask or thread
to drive Xcom call mechanism.

If GCS is chosen as an O/S shell for XDI, all other modules no
need to be changed, since GCS is a set of MVS functions.
Iteration can still be driven by ECB mechanism.

If CMS is chosen as an O/S shell for XDI, SVC 99 (dynamic
allocation) will no longer needed.  Iteration mechanism strongly
recommended using WAKEUP module instead of deal with FLIH.
Hence, DERXDI module can be written in Rexx language, which much
simpler.  All other XDI modules that call SVC 99 deal with QSAM
macros or INTRDR need to be modified.



2.2.  Functions

As mentioned above, the main function of XDI is enhancing Xcom
application in MVS/ESA or OS/390 environment, especially for
report transfer function, as shown in Table 1.  Even, operator
can transfer dataset directly from MVS console using XDI command;

F XDI,SF,recipid,name,dataset_name


Table 1:  Main function of XDI enhances Xcom report/spool
transfer function

Xcom function

Without XDI                        With XDI
File transfer
standard                           standard

Report/Spool transfer
standard                           enhanced

Job transfer
standard                           standard



Table 2:  Advantages of XDI for Xcom application

Report/Spool Transfer Function

Without XDI                                  With XDI

Spool-to-spool
Yes                                          Yes

Keep report after print at remote spool
Yes                                          Yes

Keep report as a file at remote system
Need PPS                                     Yes

Routing tag support for Report distribution
No                                           Yes

Check point recovery support
No                                           Yes

Direct printing at remote system
Yes                                          Yes

I/O overhead in local system
Standard                                     Yes

Plug and play with CA-Dispatch(tm)
No                                           Yes

Plug and play with Control-D(tm)
No                                           Yes





Based on the above evaluation (see Table 2), advantage of XDI is
not only make Xcom report transfer function easier and keep
consistent to JES, Dispatch and any other MVS application
cultures and conventions. It also enhance Xcom capabilities to
support report distribution instead of just point-to-point report
transfer.



2.3.  Operation Logic

XDI is an external writer program with some special functions
  added, i.e.:

? Maintain set of Xcom SYSIN01 parameter-files in PDS called
  parameter library.

? Maintain JES destination table.

? Maintain correlation each entry (destination name) of
  destination table with parameter-files.

? Generate Xcom-job and submit internally at the end of each
  spool sysout process.


2.3.1.  Operating Environment

Since XDI uses subsystem request code of 01, logic flow is
synchronous with no lock held as a single task program.  XDI runs
in supervisor state with key 0, and its address space must acts
as primary, secondary and home space at the same time.  To fulfil
all of the above requirements, XDI must be installed in APF
library with authorization code of 1.

To optimize its performance, XDI runs with addressing mode of
31-bit.  But, some of 14 XDI modules stay below 16MB line due to
DCB limitation.   Main entry linkage uses a standard linkage
convention.  But, again, to achieve better performance and easier
coding, linkage method between XDI main module and subroutine
modules, and inter subroutine modules use ESA linkage stacked
state features.  Therefore, XDI will only compatible to MVS/ESA
(under S/390) or any OS/390.  To operate XDI in MVS/ESA under
ESA/370, strongly recommended to modify each @PROLOG in each
module and re-sysgen them.



2.3.2.  Steps of Work

Upon start up, XDI contacts to JES to select certain sysout files
after initialization completed.  It then enters to wait state
until a selected sysout file occurs or such MODIFY (or F) command
received.  Sysout file selection performed based on spool class
specified in XDISYSnn parameter and list of DESTid specified in
XDITABnn parameter.  Upon occurrence of selected sysout file, JES
then POST an ECB across XDI address space.  XDI wakes up and
begins to works with the following steps:

1. Evaluate sysout dataset name, writer name, DESTid, logical
record length (lrecl) and record format (recfm).  If it doesn't
confirmed with parameter, then purge it and back to wait state.

2. Set writer name to "NONAME" if it doesn't exist.

3. Allocate dynamically sysout dataset into given DD name as an
input file with locate transmittal mode.

4. Allocate a new flat dataset into LCLDS01 DD name as an output
file with dataset name XDI.recipid.rptname.Dyyddd.Thhmmsst.Cnnnn
where recipid is DESTid and rptname is writer name.

5. Get a logical record from sysout file and put it into LCLDS01
  file until EOF with the following rule;

? If PCFORM=WINDOWS specified in XDISYSnn parameter, manipulates
  all space controls as what printer does and change all channel
  skip controls into ASCII page_break control character.

? If PCFORM=DISPATCH specified in XDISYSnn parameter, manipulates
  all space controls as what printer does and change all channel
  skip controls with page header as what Dispatch/RTC does.

? If PCFORM=S/390 specified in XDISYSnn parameter, no
  manipulation perform.  Just copy sysout file into LCLDS01 file as
  is.

6. Close and deallocate sysout and LCLDS01 files upon EOF.
   Sysout file then purged or LEAVEd depend on HOLD status of JES
   OUTCLASS definition.

7. Creates Xcom job with the following rule;

? Job name is XCrecipid.

? Job parameter is taken from XPARM=('Xcom job parameter')
  specified in XDISYSnn parameter.

? Xcom LCLDS01 DD card is built with disposition taken from
  string specified on XDISP= keyword in XDISYSnn parameter and DSN
  of CADS.XCOM.recipid.rptname.Dyyddd.Thhmmsst.Cnnn.

? List of DD cards are taken from string specified on CAILIB=,
  STEPLIB=, GLOBLIB=, RESTLIB= and PARMLIB= keywords in XDISYSnn
  parameter.

? Xcom SYSIN01 parameters cards are taken from the content of
  parmlib member named as recipid (DESTid).

? Insert FILE=d:\DISPATCH\recipid\rptname.x card into Xcom
  SYSIN01 parameters cards, where d taken from a letter specified
  on PCDRIVE= keyword in XDISYSnn parameter, recipid is DESTid,
  rptname is writer name and x is W, D or S depend on PCFORM=
  specified in XDISYSnn parameter.

8. Submit Xcom job to JES via INTRDR.

9. Ask subsystem interface for next selected sysout file.  Go to
   step 1 if sysout file found, or enter to wait state until a
   selected sysout file occurs or such MODIFY (or F) command
   received.

Writer name can not be captured into SSOB/SSSO control block
while DESTid is used with spool classes as sysout file selection
criterions.  In fact, XDI needs writer name to identify report
contained in sysout file.  Because of the above subsystem
interface request code 01 limitation, XDI uses at least 2 spool
classes, one as an input gate class and the other as work class.

Input gate class specified on CLASS= (or CLASSES= for 2 to 8
classes) keyword in XDISYSnn parameter.  Work class which also
called requeue class specified on RQCLASS= keyword in XDISYSnn
parameter.  XDI waits for sysout files in gate classes.  Upon
occurrence, keeps all SSOB/SSSO information, of course no writer
name, then transfers sysout file into requeue class.  XDI then
reexecutes subsystem interface request code 01 without DESTid to
takes writer name.  Spool sysout processing completed in the
requeue class.


2.3.3.  Global Main Logic Flow

Component       :       XDI
Module       :       DERXDI



2.3.4.  I/O Preparation Logic Flow

Component       :       XIO
Module       :       DERXIO






Chapter 3
PROGRAM DOCUMENTATION


XDI consist of 12 modules.   Some of them are procedure routines
while some others are control blocks and data areas.  To simplify
coding, some certain logic flows were coded as assembly macros.
XDI source codes are supported by 33 their own macros.
Currently, XDI status is version 1, release 0 and modification
level 1.  This mean actually XDI is not released yet.


3.1.  XDI Program Modules

The following list describes each XDI program module
comprehensively.

DERXDI - XDI Main Module
? Module name - DERXDI
? Module type - procedure
? Amode 31 and Rmode any
? Attributes - Reentrant, reusable and authorization code 1
? Linkage - Conventional
? Function - Main logic - global iteration.

DERXDP - XDI Parameter Initializer
? Module name - DERXDP
? Module type - procedure
? Amode 31, Rmode any
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Initialize parameters.

DERXIO - XDI I/O Preparation Routine
? Module name - DERXIO
? Module type - procedure
? Amode 31, Rmode 24
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Prepares and performs dynamic
  allocation/deallocation sysout and output files and open them,
  and generate and submit Xcom job.

DERXDS - XDI Sysout Requeue Driver Routine
? Module name - DERXIO
? Module type - procedure
? Amode 31, Rmode any
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Transfer sysout file from gate class to requeue
  class and reevaluates its writer name.

DERXSF - XDI Send File (SF) Command Processor
? Module name - DERXIO
? Module type - procedure
? Amode 31, Rmode any
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Transfer a cataloged dataset to remote system using
  XDI destination parameters.

DERWTR - XDI Output Writer Routine
? Module name - DERWTR
? Module type - procedure
? Amode 31, Rmode 24
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Create output (LCLDS01) file from standard format
  sysout.

DERWTB - XDI Output Writer Routine
? Module name - DERWTB
? Module type - procedure
? Amode 31, Rmode 24
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Create output (LCLDS01) file from nonstandard format
  sysout.

DERWTG - XDI Sysout Destroyer Routine
? Module name - DERWTG
? Module type - procedure
? Amode 31, Rmode 24
? Attributes - Reentrant, reusable, only loadable and
  authorization code 0
? Linkage - ESA stacked state
? Function - Destroy unexpected sysout files.

DERWSA - XDI Working Storage Area
? Module name - DERWSA
? Module type - data area
? Amode 31, Rmode 24
? Attributes - Nonexecutable, nonreentrant, reusable, only
  loadable and authorization code 0
? Linkage - ESA stacked state
? Function - Pre formatted data area.

DERWTX - XDI Extended Working Storage Area
? Module name - DERWTX
? Module type - data area
? Amode 31, Rmode 24
? Attributes - Nonexecutable, nonreentrant, reusable, only
  loadable and authorization code 0
? Linkage - ESA stacked state
? Function - Pre formatted several parameters for SVC 99, system
  services, I/O services and set of list form MVS macros.

DERDCB - XDI Set of Data Control Blocks
? Module name - DERDCB
? Module type - data area
? Amode 31, Rmode 24
? Attributes - Nonexecutable, nonreentrant, reusable, only
  loadable and authorization code 0
? Linkage - ESA stacked state
? Function - Set of pre formatted DCBs and DCBEs for all input,
  output and reference files.

DERMSG - XDI Set of Messages
? Module name - DERMSG
? Module type - data area
? Amode 31, Rmode 24
? Attributes - Nonexecutable, nonreentrant, reusable, only
  loadable and authorization code 0
? Linkage - ESA stacked state
? Function - Set of pre formatted XDI messages.

3.2.  XDI Macros

XDI program is supported by several macros includes 36 its own
macros.   This subchapter describes 36 XDI macros
comprehensively.   XDI macros are divided in 2 categories, outer
and inner macros.   All of them are not applicable for users,
except macro DERWTX that is used for construct WTX configuration
module.


3.2.1.  XDI Outer Macros

XDI outer macros always prefixed by an '@' sign.   These are
coded directly in XDI source program modules.  Their name
normally acronym represents their function.   XDI 1.0.1 source
codes package consists of 16 outer macros.

@AMODE Macro - Switch Addressing Mode
? Macro name - @AMODE
? Macro type - routine
? Registers used - R15
? Function - Switch addressing mode.
? Syntax -
@AMODE [24|31]

@DYNAMIC Macro - Dynamic Data Allocation/Deallocation
? Macro name - @DYNAMIC
? Macro type - Data definition and Routine
? Registers used - R0, R1 and R15
? Function - Builds SVC 99 parameters and executes it to perform
  dynamic data allocation/deallocation.
? Syntax -
@DYNAMIC [ALLOC|DEALLOC|UPDATE|DATA],
LOC=[*|base],
DSN=Dataset-name,
DD=DDname,
GETDD=RX-type-address,
CLASS=Sysout-spool-class,
NOHOLD=[YES|NO],
MEMBER=PDS-member-name,
DISP=([OLD|NEW|MOD|SHR],[CATLG|UNCATLG|KEEP|DELETE]),
CDISP=[CATLG|UNCATLG|KEEP|DELETE],
SPACE=([CYL|TRK|blksz],(prim[,sec[,dir ]])[,RLSE]),
VOLSER=Volume-serial-number,
UNIT=Volume-unit-name,
SYSOUT=[YES|NO],
FREE=[YES|NO],
COPIES=Sysout-number-of-copies,
LABEL=[NL|SL|NSL|SUL|BLP|LTM|AL|AUL],
EXPDT=Expiry-date,
RETPD=Retention-day,
DUMMY=[YES|NO],
BLKSIZE=DCB-block-size,
FUNC=[I],
FORM=Sysout-form-name,
LRECL=DCB-logical-record-length,
PREFIX=1-to-2-byte-unique-prefix,
DCB=DCB-reference-DSN,
RECFM=[A|M|S|F|FB|FBA|FBM|U|V|VB|VBA|VBM],
DSORG=[DA|DAU|PO|POU|PS|PSU]
SSREQ=[JES2|JES3|Susystem-name],
DYNALLC=[YES|NO],
EXTRB=[YES|NO],
RECBUF=[YES|NO],
TOLFAIL=Tolerable-error-code,
ERRMSG=[YES|NO|WTO],
TYPE=[CSECT|DSECT|DATA|COM]

@EDITDSN Macro - Edit Dataset Name
? Macro name - @EDITDSN
? Macro type - routine
? Registers used - R0,R1 and R15
? Function - Edit dataset name to represent recipient-ID, report
  name, date, time and sequent number.
? Syntax -
@EDITDSN DSN=RX-type-address-of-result,
RCPID=RX-type-address-of-8byte-recipient-id,
RPTNAME=RX-type-address-of-8byte-report-name,
DSHLQ=9byte-high-level-qualifier

@EDITHDR Macro - Edit Dispatch/PC-formatted Report Page Header
? Macro name - @EDITHDR
? Macro type - routine
? Registers used - R0,R1 and R15
? Function - Edit page header for CA-Dispatch/PC-formatted
  report-text file.
? Syntax -
@EDITHDR [EXEC|UPDATE],
CODE=9byte-flag-code,
RCPID=RX-type-address-of-8byte-recipient-id,
RPTNAME=RX-type-address-of-8byte-report-name,
PREFIX=2byte-label-prefix

@EDITTOD Macro - Obtain and Edit TOD Date and Time
? Macro name - @EDITTOD
? Macro type - routine
? Registers used - R0,R1 and R15
? Function - Obtain calendar TOD date and time and edit them in
  universal or Julian format or both.
? Syntax -
@EDITTOD FORMAT=[U|J|BOTH]

@EXIT Macro - Module Section Exit Routine
? Macro name - @EXIT
? Macro type - routine
? Registers used - All.
? Function - Module section level exit routine.
? Syntax -
@EXIT KEEPRC

@FLATDS Macro - Define Flat Dataset File
? Macro name - @FLATDS
? Macro type - Data definition.
? Registers used - None.
? Function - Build data definition consists of full set of SVC 99
  parameters to allocate and deallocate flat dataset.
? Syntax -
@FLATDS BLKSIZE=[6233|Block-size],
LRECL=[150|lrec-length],
SPACE=([CYL|TRK|blk],(prim[,sec])[,RLSE]),
VOLUNIT=Volume-unit-name,
DDNAME=DD-name,
ABNDISP=[KEEP|DELETE]

@MESSAGE Macro - Issue XDI Variable Message
? Macro name - @MESSAGE
? Macro type - Routine.
? Registers used - R0, R1 and R15.
? Function - Build dynamic XDI structured message text from
  several variables and issue MVS WTO macro.
? Syntax -
@MESSAGE [INFO|WARNING|ERROR],
OPER=[SVC99|SSREQ|IO|FIND|SHOW|LIST],
TYPE=[Depend-on-OPER],
OBJECT=[Depend-on-TYPE-of-OPER],
OPCODE=[B|Any-assembly-branching-opcode],
ROUTCDE=[Valid-WTO-route-codes],
TEXT=[Message-text],
RC=[Register-contained-return-code],
MF=[Valid-WTO-MF-operand],
EXIT=[RX-type-address|(Register)]

@PROLOG Macro - Module Entry Prolog
? Macro name - @PROLOG
? Macro type - Routine.
? Registers used - All.
? Function - Build program module entry prolog routine.
? Syntax -
@PROLOG ESA=[390|370|NO],
AMODE=[24|31|ANY],
RMODE=[24|ANY],
RENT=[YES|NO],
SVASIZE=Save-area-size,
BREG=[R12|List-of-1-to-3-register]

@SYSOUT Macro - Define Sysout File
? Macro name - @SYSOUT
? Macro type - Data definition.
? Registers used - None.
? Function - Build data definition consists of full set of SVC 99
  parameters to allocate and deallocate sysout dataset.
? Syntax -
@SYSOUT JESNAME=JES-name,
DDNAME=DD-name

@VDATA Macro - Build Globally Declared Data
? Macro name - @VDATA
? Macro type - Data definition.
? Registers used - None.
? Function - Build globally declared data definition.
? Syntax -
@VDATA


@VGLOBAL Macro - Declare Global Variables
? Macro name - @VGLOBAL
? Macro type - Data definition.
? Registers used - None.
? Function - Build globally declared variables data definition.
? Syntax -
@VGLOBAL

@WTO Macro - Issue XDI Fixed Message
? Macro name - @WTO
? Macro type - Routine.
? Registers used - R0, R1 and R15.
? Function - Build static XDI structured message and issue it
  using MVS WTO macro.
? Syntax -
@WTO CODE=3digit-message-code-with-sign,
TFLAGS=RX-type-address-of-1byte-flags,
TBIT=1byte-flags-expression,
REG=[R2|Work-register],
PREFIX=RX-type-address-of-6byte-msgcode-prefix,
TRACE=[CHECK|ALWAYS]

@XCOMJOB Macro - Build or Update Xcom Job
? Macro name - @XCOMJOB
? Macro type - Routine and data definition.
? Registers used - R0, R1 and R15.
? Function - Build or update internal Xcom job JCL.
? Syntax -
Build data definition -
@XCOMJOB [DSECT|CSECT|COM|DATA],
DISP=([OLD|NEW|MOD|SHR],[CATLG,UNCATLG|KEEP|DELETE]),
CLASS=Any-valid-job-class,
MCLASS=Any-valid-sysout-class,
MLEVEL=([0|1][,0|,1])
PREFIX=[XC|2byte-label-prefix]
PCDRIVE=1byte-PC-drive-letter,
STEPLIB=44byte-steplib-DSN,
CAILIB=44byte-CA-loadlib-DSN,
CNTLLIB=44byte-XCOMCNTL-DSN,
GLOBLIB=44byte-XCOMGLOB-DSN,
RESTLIB=44byte-XCOMREST-DSN

Update data definition -
@XCOMJOB [EXEC|UPDATE],
BREG=Register,
LOC=[*|any-label|(register)],
RCPID=RX-type-address-of-Recipient-ID,
RPTNAME=RX-type-address-of-report-name,
JOBNUM=RX-type-address-of-job-number,
PREFIX=[XC|2byte-label-prefix]
PCDRIVE=RX-type-address-of-1byte-PC-drive-letter,
STEPLIB=RX-type-address-of-44byte-steplib-DSN,
CAILIB=RX-type-address-of-44byte-CA-loadlib-DSN,
CNTLLIB=RX-type-address-of-44byte-XCOMCNTL-DSN,
GLOBLIB=RX-type-address-of-44byte-XCOMGLOB-DSN,
RESTLIB=RX-type-address-of-44byte-XCOMREST-DSN,
JOBPARM=RX-type-address-of-XPARM-value,
DSN=RX-type-address-of-44byte-LFILE-DSN,



3.2.2.  XDI Inner Macros

XDI inner macros are indirect macros.  There are called from
other XDI macros, normally XDI outer macros.  These are indicated
by prefix 'DER' in front of their names.  XDI 1.0.1 source codes
package consists of 20 inner macros.  Below is a list of XDI
inner macros and their function description.

? DERCIB - Map of communication interface control block
? DERDCB - Set of Data control block
? DERDSPHD - Map of Dispatch page header
? DEREDTMS - Map of XDI variable message
? DEREDTRC - Editing routine for decimal RC
? DERFFREC - Map of VB record of QSAM dataset
? DERGBLVR - XDI GBLA, GBLB and GBLC source copy book.
? DERMSG - Set of XDI static messages
? DERS99AL - Map of SVC 99 parameters for allocation
? DERS99CH - Final updating routine for SVC 99 parameters
? DERS99DA - Map of SVC 99 parameters
? DERS99FR - Map of SVC 99 parameters for deallocation
? DERS99MD - Intermediate updating routine for SVC 99 parameters
? DERTABCC - Table of printers CC equates
? DERTODUF -  Final editing routine for universal TOD format
? DERTODYF -  Final editing routine for Julian TOD format
? DERWSA - Map of XDI main work area
? DERWTX - Map of WTX configuration
? DERXCJOB - Map of Xcom job JCL.




Part-II

USER's GUIDE





Chapter 4
INSTALLATION



In version 1.0.1 there is no such packaging method applied.  To
install XDI, just copy XDI load library and register it as an APF
library.  Use normal DCB values of load module library to
allocate XDI load library.  The following is a list of XDI 1.0.1
installation procedure steps;

1. Allocate a new XDI load library i.e.  XDI.LOADLIB

2. Copy all XDI load modules into the new XDI load library.

3. Register the XDI load library as an APF library and make it
   effective.

4. Copy XDI cataloged procedure into certain active procedure
   library.

5. Customize it as necessary.

6. Allocate a XDI parameter library (of course PDS) i.e.
   XDI.PARMLIB.

7. Copy 3 samples XDI parameter library member, XDISYS00,
   XDITAB00 and KCU043.

8. Customize the above 3 samples as necessary.

Upon completion of all above steps, XDI then ready to be started
up.  Given name of XDI cataloged procedure is XDI.  To start XDI,
use START MVS console command as shown below:

S XDI[,START=nn]

? XDI is XDI cataloged procedure name.
? START=nn is an optional operand where nn is any 2 digits suffix
  to point to XDISYSnn member of XDI parameter library.

User can change XDI to any valid procedure name.


4.1.  XDI Cataloged Procedure

Given XDI cataloged procedure is as shown below. Procedure name
and step name can be any valid name.

//XDI PROC START=00,VER=12
//XDIEXEC EXEC PGM=DERXDI,REGION=5M,
//    DYNAMNBR=99,TIME=1440,
//    PARM='FILE=&START'
//STEPLIB DD DISP=SHR,DSN=XDI&VER..LOADLIB
//PARMLIB DD DISP=SHR,DSN=XDI.PARMLIB
//INTRDR  DD SYSOUT=(A,INTRDR)

Before started up, user must ensure everything in the right
place.  There 4 point must be verified, job parameters, STEPLIB,
PARMLIB and INTRDR files.


Job Parameters

Important parameters for XDI are PARM, REGION and TIME.  The rest
are optional.

? PARM parameter must be specified as PARM='FILE=mm' or
  PARM='FILE=&X'.  If PARM='FILE=nn' specified, XDISYSnn will be
  selected statically.  If PARM='FILE=&X' specified, XDISYSmm will
  be selected dynamically depend on value carried in variable &X.

? Specify REGION=5M is recommended.  Do not specify REGION too
  small or too high.

? Specify TIME=1440 or TIME=NOLIMIT is mandatory to void abend
  S522 caused by UJV parameter of SMF.

? DYNAMNBR is optional.  Since dynamic allocation/deallocation
  (SVC 99) intensively used in XDI, specify DYNAMNBR greater than
  the default value will be better.


STEPLIB File

If XDI load library is concatenated in the LNKLST system
parameter, STEPLIB file is then not necessarily to be specified.
But it will become mandatory if XDI load library is not
concatenated in LNKLST.  Since XDI is a single address space and
all its load modules are reusable, specifies XDI in the LNKLST
would not improve system performance.   Does not matter how XDI
load library is registered as linked library, it must be a valid
APF library.


PARMLIB File

PARMLIB file is mandatory.  It must point to PDS of which
contains XDISYSmm and XDITABnn members as well as all destination
members.


INTRDR File

INTRDR is used to submit Xcom job.  Therefore, file INTRDR must
point to SYSOUT with writer name INTRDR.



4.2.  XDI Libraries

The standard XDI 1.0.1 installation material package consists of
6 libraries. All are PDS as shown bellow;

1. XDI.PARMLIB contains samples of XDISYS00, XDITAB00 and member
   related to XDITAB00.
2. XDI.LOADLIB contains XDI load modules.
3. XDI.SRCLIB contains customizable XDI source codes modules.
4. XDI.JCLLIB contains JCL for maintenance and sysgen.
5. XDI.V1R0M1.MACLIB contains 33 XDI 1.0.1 macros.
6. XDI.V1R0M1.SRCLIB contains 12 XDI 1.0.1 source codes modules.


4.3.  JCLs for Sysgen and Maintenance

The most important library regarding the title of this chapter is
XDI.JCLLIB. It contains several important catalog procedures and
jobs JCL, i.e.;

? ASSEMBLE - General assembling and link-editing procedure
? JXDIGEN - XDI system generation (sysgen) job
? JWTX - WTX assembling and link-editing job


4.3.1.  ASSEMBLE Procedure

ASSEMBLE JCL is a general purpose assembling and link-editing
procedure.  It is actually applicable for any program
development.   It must be installed (copied) in any valid
procedure library before used.  Update its as necessary to meet
local environment.  The following JCL source code is hard copy of
ASSEMBLE cataloged procedure.

//ASSEMBLE PROC MBR=,
//          PROG=ASMA90,
//          NAME=,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='REUS',
//          SRCLIB='CAI.LCLMODS',
//          LNKLIB='CAI.CAILIB',
//          MACLIB='SYS1.MACLIB',
//          SYSLIB='SYS1.MACLIB',
//          MODGEN='SYS1.MODGEN',
//          JESMAC='SYS1.HASPSRC',
//          SOUTC=X
//*
//*   +------------+
//*   ¦ ASSEMBLING ¦
//*   +------------+
//ASM      EXEC  PGM=&PROG,
//            PARM=('&APARM')
//SYSLIB   DD  DSN=&MACLIB,DISP=SHR,DCB=BLKSIZE=20000
//         DD  DSN=&SYSLIB,DISP=SHR
//         DD  DSN=&MODGEN,DISP=SHR
//         DD  DSN=&JESMAC,DISP=SHR
//SYSIN    DD  DSN=&SRCLIB(&MBR),DISP=SHR
//SYSPRINT DD  SYSOUT=(&SOUTC,A&MBR)
//SYSPUNCH DD  UNIT=SYSALLDA,DISP=(,PASS),
//             SPACE=(6080,(50,20),RLSE),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)
//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(1,1))
//*
//*   +--------------+
//*   ¦ LINK-EDITING ¦
//*   +--------------+
//LKED     EXEC  PGM=HEWL,
//             PARM=('XREF,LIST','&LPARM'),
//             COND=((4,LT,ASM))
//SYSLIB   DD  DSN=&LNKLIB,DISP=(SHR),
//             DCB=BLKSIZE=20000
//SYSLIN   DD  DSN=*.ASM.SYSPUNCH,DISP=(OLD,DELETE)
//SYSLMOD  DD  DSN=&LNKLIB(&NAME),DISP=(SHR)
//SYSPRINT DD  SYSOUT=(&SOUTC,L&NAME)
//



4.3.2.  JXDIGEN Job

JXDIGEN JCL is an assembling and link-editing job to generate XDI
system.  It uses ASSEMBLE procedure above in each step.  JXDIGEN
consists of 12 steps.  Each step responsible to generate one XDI
module, which is independent each other.  Even though it is
provided in the installation package, JXDIGEN is not belongs to
users.  JXDIGEN job used by trained or authorized people only to
regenerate all modules of XDI system if it is really needed.  The
following JCL source code is hard copy of JXDIGEN job.

//JXDIGEN JOB (XDI00),
//         'XDI SYSGEN     ',
//         CLASS=A,
//         MSGCLASS=X,
//         NOTIFY=
//*
//XDI  EXEC ASSEMBLE,MBR=DERXDI,
//          NAME=DERXDI,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='LIST,RENT,AC=1',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//XDP  EXEC ASSEMBLE,MBR=DERXDP,
//          NAME=DERXDP,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//XDS  EXEC ASSEMBLE,MBR=DERXDS,
//          NAME=DERXDS,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//XWR  EXEC ASSEMBLE,MBR=DERXWR,
//          NAME=DERXWR,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//COM  EXEC ASSEMBLE,MBR=DERCOM,
//          NAME=DERCOM,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//XIO  EXEC ASSEMBLE,MBR=DERXIO,
//          NAME=DERXIO,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//WTR  EXEC ASSEMBLE,MBR=DERWTR,
//          NAME=DERWTR,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//WTB  EXEC ASSEMBLE,MBR=DERWTB,
//          NAME=DERWTB,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//WTG  EXEC ASSEMBLE,MBR=DERWTG,
//          NAME=DERWTG,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//XSF  EXEC ASSEMBLE,MBR=DERXSF,
//          NAME=DERXSF,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='RENT,OL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//WTX  EXEC ASSEMBLE,MBR=DERWTX,
//          NAME=DERWTX,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',
//          SRCLIB='XDI.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//DCB  EXEC ASSEMBLE,MBR=DERDCB,
//          NAME=DERDCB,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//MSG  EXEC ASSEMBLE,MBR=DERMSG,
//          NAME=DERMSG,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//*
//WSA  EXEC ASSEMBLE,MBR=DERWSA,
//          NAME=DERWSA,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',
//          SRCLIB='XDI.V1R0M1.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//

4.3.3.  JWTX Job

JWTX JCL is an assembling and link-editing job to regenerate WTX
module.  It is provided in installation package in case users
need to customize WTX.   Do not touch this job unless known by
authorized engineer.   Detail of JWTX job can be found in chapter
3. The following JCL source code is hard copy of JWTX job.

//JWTX EXEC ASSEMBLE,MBR=DERWTX,
//          NAME=DERWTX,
//          APARM='NOOBJECT,DECK,ALIGN',
//          LPARM='NOLET,NORENT,STORENX,OL,NE,REUS=SERIAL',
//          SRCLIB='XDI.SRCLIB',
//          LNKLIB='XDI.LOADLIB',
//          MACLIB='XDI.V1R0M1.MACLIB'
//



Chapter 5
CUSTOMIZATION


This chapter explains how to customize XDI program.  In
XDI.SRCLIB there is a source module named DERWTX and called WTX.
WTX consists of defaults and permanent static parameters values.
Given standard WTX shown as follow.

        DERWTX TYPE=CSECT,                                            +
              AMODE=31,RMODE=24,       Addressing & Residency modes   +
              JES=JES2,                Job entry subsystem            +
              BLKSIZE=6233,            Flat DS - block size           +
              LRECL=150,                       - logical record length+
              UNIT=3390,                       - eligible vol unit    +
              SPACE=(CYL,(50,8),RLSE),         - space                +
              ABNDISP=KEEP,                    - disp. if abend       +
              XJCLASS=T,               XCOM Job - class               +
              XMCLASS=T,                        - message class       +
              XMLEVEL=(1,1),                    - message level       +
              XDISP=(OLD,KEEP),                 - LFILE disposition   +
              DSPCODE=YYEDSPC10,                - Dispatch flags code +
              PCROOT=DISPATCH                   - PC root dir. name

Since all variable parameters can be changed dynamically via
XDISYS member or console command, customize WTX is not
recommended unless very critical.  Consult to authorized support
engineer if necessary. Make sure backup has been properly done
before make any changes.



5.1. WTX Parameters

There are 12 WTX parameters that might be modified by users to
meet their system environment.  Since DERWTX is an assembly
macro, it must follow the rule of related Assembler.  Normally,
keyword started in column 16 and delimited by comma.
Continuation must be in column 72.


5.1.1.  TYPE, AMODE and RMODE

Do not change TYPE=CSECT, AMODE=31 and RMODE=24 parameters
without consulting them to the XDI author (Deru Sudibyo) or any
other engineer who assigned by the author.


5.1.2.  JES=Primary-JES-name

JES=JES2 specifies that primary JES name is JES2.   Users may
change this parameter to their own primary-JES-name.


5.1.3.  Flat File (Transition File) Parameters

WTX consist of 5 flat file (transition file) parameters, i.e.;

? BLKSIZE=6233,
? LRECL=150,
? UNIT=3390,
? SPACE=(CYL,(50,8),RLSE),
? ABNDISP=KEEP,

The first four are DCB parameters to construct transition flat
file.  Since these are DCB values, users must understand DCB very
well before modify them.  Do not forget to follow assembly macro
rules.  Mistaken made on these values will result unpredictable
error during operation.

The last is conditional disposition will be used by system if XDI
abend.


5.1.4.  Xcom Job JCL Parameters

WTX consist of 6 Xcom job parameters, i.e.;

? XJCLASS=T,
? XMCLASS=T,
? XMLEVEL=(1,1),
? XDISP=(OLD,KEEP),
? DSPCODE=YYEDSPC10,
? PCROOT=DISPATCH

The first three are job card parameters used by generated Xcom
job.  XJCLASS is job CLASS, XMCLASS is MSGCLASS and XMLEVEL is
MSGLEVEL.  Next is XDISP, disposition used in DD card of LCLDS01.
Users must familiar JCL very well before modify them. Do not
forget to follow assembly macro rules.

The fifth is DSPCODE with default value YYEDSC10.  This parameter
applicable only if PCFORM=DISPATCH is specified in XDISYSmm
member of XDI parameter library.    Specified DSPCODE value will
be written in header of each page of Dispatch formatted text.
The last is PCROOT with default value DISPATCH.  It will be used
as targeted root folder name of remote DOS or Windows system.
PCROOT value must be a valid 8 characters DOS or Windows folder
name.



5.2.  Applying WTX Changes

To apply the changes of WTX, users must follow the following steps.

? Stop XDI
? Backup all XDI libraries
? Submit JWTX job (in XDI.JCLIB)
? Make sure there is no error or warning message
? Restore all XDI libraries if necessary
? Redo the above steps if necessary
? Restart XDI.





Chapter 6
XDI PARAMETERS


XDI is a parameterized program.  All parameters must be filed in
partitioned dataset (PDS) called XDI parameter library and must
be allocated in XDI address space with DD name PARMLIB.  Standard
installation material provides an XDI parameter library named
XDI.PARMLIB.  All members in XDI.PARMLIB are samples.  These are
not applicable for users and must be customized to achieve user's
needs.   This chapter explains all parameters in detail.


6.1.  XDISYSmm - XDI System Parameter

XDISYSmm is placed as a member of XDI parameter library (PARMLIB
PDS) with member name of XDISYSmm, where mm is any 2 characters
or numbers.  It will be read first during XDI system
initialization.  An XDISYSmm is selected based on mm pointed by
FILE= keyword of job parameter on exec card of XDI cataloged
procedure.


6.1.1.  Syntax and Rules

All parameters are specified as values of their keywords.  Each
card of XDISYS valid only for a pair of keyword and its value,
left justified with no space, starting at column 1 and ended at
least with a blank.    Anything specified after blank will be
assumed as remarks.   A card with blank or asterisk ('*') at
column 1 will be ignored.   Currently XDI 1.0.1 supports 16
parameters;

? CLASS=Class-list
? RQCLASS=Class
? PCFORM=[WINDOWS|DISPATCH|S/390]
? TRACE=[ON|OFF]
? DISP=[KEEP|DELETE]
? XDISP=[KEEP|DELETE]
? HOLD=[PROCESS|IGNORE]
? LRECL=[NORMAL|ASIS]
? XPARM=('ACBNAME=XCOM00,TYPE=EXECUTE')
? TABLE=nn
? PCDRIVE=PC-drive-letter
? STEPLIB=DSN-of-step-library
? CAILIB=DSN-of-CA-load-library
? PARMLIB=DSN-of-Xcom-control-library
? RESTLIB=DSN-of-Xcom-restart-library
? GLOBLIB=DSN-of-Xcom-global-library



6.1.2.  CLASS=Class-list

Class-list is 1 to 8 alphanumeric characters represent JES output
classes.  XDI selects sysout files only for those classes.  If
more than one class specified, each class in the list must be
unique.


6.1.3.  RQCLASS=Class

Class is a single alphanumeric character represents a JES output
class.  XDI uses this class to execute each selected file from
the above class-list.  It then called requeue-class and must not
be the same as one of the above class-list.


6.1.4.  PCFORM=[WINDOWS|DISPATCH|S/390]

PCFORM=WINDOWS specifies XDI to convert sysout files into Windows
(or DOS) formatted text before transferred to Xcom.
PCFORM=DISPATCH specifies XDI to convert sysout files into
CA-Dispatch/PC formatted text before transferred to Xcom.  The
difference between the above 2 PCFORM is only in page break.  The
Windows formatted text uses an X'0C' as page break control
character, while Dispatch/PC uses such header.  All ASA or
machine carriage control will be interpreted as what any
mainframe printer does.

PCFORM=S/390 specifies XDI need not any conversion.  Sysout files
will be transferred as their original mainframe format. This
PCFORM useful for mainframe to mainframe via PC report
transmission.


6.1.5.  TRACE=[ON|OFF]

TRACE=ON specifies XDI to run in trace mode.  All steps of each
process will be informed to users via console message.  To turn
it off, change this parameter to TRACE=OFF.


6.1.6.  DISP= and HOLD= are not Supported yet


6.1.7.  XDISP=[KEEP|DELETE]

XDISP=KEEP specifies XDI to generate Xcom job with LCLDS01 file
disposition DISP=(OLD,KEEP) to retain transition flat dataset
after transmission performed.   If TYPE=SCHEDULE is stated in
XPARM parameter, then XDISP=KEEP is required since generated Xcom
job will end before transmission performed.  The amount of
retained files will increase all the time and need to be deleted
to void such space saturation.  Users must take responsibility to
maintain all retained transition files.   Otherwise, large amount
of DASD volumes will be consumed by this operation.

XDISP=DELETE specifies XDI to generate Xcom job with LCLDS01 file
disposition DISP=(OLD,DELETE) to purge transition flat file after
transmission performed. If TYPE=SCHEDULE is stated in XPARM
parameter, then XDISP=DELETE will cause transition flat dataset
lost before transferred, since generated Xcom job will ended
before transmission performed.


6.1.8.  LRECL=[NORMAL|ASIS]

Logical record length of sysout files normally about 133 to 180.
Unfortunately, sometimes certain program such as CA-Dispatch or
Control-D, produce sysout files with very long logical record
length.  LRECL=NORMAL specifies XDI to treat each captured sysout
file as a normal sysout.  The very long logical record length
will be treated as a block of some normal logical records.
Conversion will follow the rule specified in PCFORM parameter.

LRECL=ASIS specifies XDI to treat each captured sysout file as
its original form.  Normal sysout files will be converted follow
PCFORM parameter.  Non-normal sysout files will not be converted,
but PCFORM=S/390 assumed.


6.1.9.  XPARM=Xcom-job-parameter

Xcom-job-parameter is job parameter for generated Xcom job.
Normally this parameter specifies the most required things, such
as ACB name and type of job.   XDI will not check this values,
except just substitutes the default internal value of
('ACBNAME=XCOM00,TYPE=EXECUTE') with this one.

Note, keep in mind, if TYPE=SCHEDULE is specified within the
string of XPARM value, XDISP=KEEP is then required.  Otherwise,
local file (LCLDS01 or LFILE) will lost before transmission
attempted.  XDI does not care to those both values.   Mistaken in
this case will no warning at al.


6.1.10.  TABLE=nn

Value of 2 characters nn will point to an XDI parameter library
member named XDITABnn.  TABLE=nn specifies XDI to load the JES
destination list contained in XDITABnn member and build
destination directory of which subsystem request iteration based
on. The nn might be 2 any combination of alphabetic and numeric
with any order.


6.1.11.  PCDRIVE=PC-drive-letter

PC-drive-letter is an alphabetic character used as an address of
PC disk drive.  This value will be edited into the FILE=
parameter in SYSIN01 file of generated Xcom job.  For example, if
PCDRIVE=C, then XDI will edit FILE=C:\Dispatch\... in SYSIN01
file.


6.1.12.  STEPLIB=Steplib-file and CAILIB=Cailib-file

Datasets names specified in both parameters will be used by
generated Xcom job as STEPLIB concatenation.  Steplib-file will
be used as STEPLIB base and Cailib-file will be concatenated to
steplib-file.  Therefore, Steplib-file must be the name of Xcom
load library and Cailib-file must be the name of common CA load
library.


6.1.13.  PARMLIB=Parmlib-file

Parmlib-file is the name of Xcom control library dataset and used
by generated Xcom job as XCOMCNTL file.  Normally its name is
CAI.XCOM.CIN30CTL.


6.1.14.  RESTLIB=Restlib-file

Restlib-file is the name of Xcom restart library dataset and used
by generated Xcom job as XCOMREST file, normally,
CAI.XCOM.NONQUEUE.RESTART.


6.1.15.  GLOBLIB=Globlib-file

Globlib-file is the name of Xcom global library dataset and used
by generated Xcom job as XCOMGLOB file, normally,
CAI.XCOM.NONQUEUE.GLOBAL.


6.1.16.  Example of XDISYS00

The following is an example of XDISYS00 member given in the
installation material package.

CLASS=M                     Select class M
RQCLASS=9                   Requeue to class 9 for execution
PCFORM=WINDOWS              PC file created in Windows format
TRACE=OFF                   Disable trace
DISP=KEEP                   Keep sysout   (not supp. JES2 5.x)
XDISP=DELETE                Keep flat dataset (in XCOM job)
HOLD=PROCESS                HOLD sysout selected also (not supp J2 5)
LRECL=NORMAL                Force to use normal lrecl for XCOM
XPARM=('ACBNAME=XCOM00,TYPE=EXECUTE')
TABLE=00                    Point to XDITAB00
PCDRIVE=C                   PC HDD drive
STEPLIB=CAI.XCOM.CAILIB     XCOM Loadlib
CAILIB=CAI.CAILIB           CA Common (CA90) Loadlib
PARMLIB=CAI.XCOM.PARMLIB
RESTLIB=CAI.XCOM.NONQUEUE.RESTART
GLOBLIB=CAI.XCOM.NONQUEUE.GLOBAL

The above example may not applicable to certain users.  Users
must customize them to achieve their own environment.



6.2.  XDITABnn - XDI Destination Table

XDITABnn is a member of XDI parameter library. The suffix nn is
in conjunction to the value of TABLE=nn specified in XDISYSmm
member.   It contains a list of several JES destination names.


6.2.1.  Syntax and Rules

Each destination name must be a valid JES destination name with 6
character long and specified in separated XDITABnn card, starting
at column 1 and left justified.   Any other string at column 9 to
80 will be ignored.  A card with blank or asterisk at column 1
will be ignored as well.  XDI does not check the validity of JES
destination name.  Therefore, strongly recommended using 6
alphanumeric rule to play safe.

Besides, each destination name must represent a name of XDI
parameter library member called destination member.  Therefore,
do not use XDISYS or XDITAB as a destination name to void
confusion.


6.2.2.  Example of XDITAB00

The following is an example of XDITAB00 member given in the
installation material package.

KCU043        KC Utama Bogor Sukasari
KCP086        KC Pembantu Bogor Sartika
KCP097        KC Pembantu Bogor Cibinong
KCU044        KC Utama Bandung

The above example may not applicable to certain users.  Users
must customize them to achieve their own environment.



6.3.  XDI Destination Members

XDI destination members are several members of XDI parameter
library other than XDISYSmm and XDITABnn, in conjunction to
destination names registered in XDITABnn.   Their names must be
fixed 6 characters of valid JES destination name.   Of course,
they also must follow PDS member name rules.


6.3.1.  Syntax and Rules

Each XDI destination member must represent complete of Xcom
parameter set of one file transfer job.  Therefore, Xcom SYSIN01
parameters syntax and rules applied here.   Some certain Xcom
parameters such as TYPE=SEND, FILE= and LFILE= will be generated
internally by XDI.


6.3.2.  Passing MVS or JES Commands

Users may schedule any MVS or JES commands via XDI destination
members.  Each time the member is read in conjunction to the
captured sysout file, the command would be executed using MGCRE
SVC call.  Each command must be specified in separated card with
the following syntax.

*/CMD <MVS or JES commands>

String of */CMD in column 1 to 5 identifies that string specified
in column 7 to 72 is a command text and need to be scheduled to
MVS.  Column 6 must be a blank character.


6.3.3.  Override XDISYS Parameters

Some certain parameters in XDISYS member can be overridden for a
certain file transfer destination.  XDI parameter must be
specified in separated card with the following syntax.

*/XDI <Parameter>

String of */XDI in column 1 to 5 identifies that string specified
in column 7 to 72 is an XDI parameter and need to be applied to
override existing XDISYS value.  Column 6 must be a blank
character.


6.3.4.  Example of XDI Destination Member

The following is an example of XDI destination member given in
the installation material package.   It's named KCU043 and has
been registered in XDITAB00.

TYPE=SEND
FILETYPE=FILE
LU=LUB31201
DROPSESS=NO
RECSEP=YES
CODE=EBCDIC
TRUNCATE=NO
COMPRESS=YES
CKPT=100
RNOTIFY=LOG
FILEOPT=REPLACE
USERID=XCOM
PASSWORD=XCOM01
*/CMD V NET,ID=LUB31201,E
*/CMD SEND 'XFER TO KCU043 IN PROGRESS',USER=OPERMGR
*/XDI TRACE=ON
*/XDI PCFORM=DISPATCH

Cards 1 to 13 specify Xcom SYSIN01 parameters.  Card 14 and 15
contain MVS commands.  Each time sysout with destination of
KCU043 processed, XDI then execute MGCRE SVC to issue V
NET,ID=LUB31201,E and SEND 'XFER TO KCU043 IN
PROGRESS',USER=OPERMGR commands internally.

Card 16 and 17 XDI override parameters. Each time sysout with
destination of KCU043 processed, XDI then uses TRACE=ON and
PCFORM=DISPATCH instead of one specified in XDISYS00.


Chapter 7
XDI COMMANDS


Users or operators can pass XDI command via MVS MODIFY (or F)
command.   The general rule of MODIFY command is

F procname,command

To avoid confusion, strongly recommended to use XDI as XDI
procedure name.   XDI 1.0.1 supports very limited commands, i.e.;

? LIST
? FILE=mm
? All XDISYS parameters
? SF


7.1.  LIST Command

LIST command is used to display all current parameter values.
The syntax is

F XDI,LIST



7.2.  FILE=mm Command

FILE command is used to replace all current parameter values with
new values from XDISYSmm pointer by operand FILE=mm.  The syntax
is

F XDI,FILE=mm

XDI will load XDISYSmm and replace all existing parameters with
respective values specified in XDISYSmm, regardless the values
are the same.


7.3.  XDISYS Keyword Commands

Users also can change selected parameters instead of all.  To do
this, use one selected keyword as operand of F XDI command.  XDI
then check the specified value and replace the existing one if
the new one is valid.

For example, to change the value of PCDRIVE parameter to F, just
issue the following command;

F XDI,PCDRIVE=F

To change existing list of destination to new list contained in
XDITAB01, just issue

F XDI,TABLE=01

Note that destination name can not be changed individually.
Users must prepare changes in the new XDITAB or update existing
XDITAB member, then load it using the above command.


7.4.  SF (Send_File) Command

Using Xcom, users or operators can send file to certain remote
system in batch job or interactively via Xcom ISPF panel.  All
the above ways need such certain activities, i.e. logon TSO and
get Xcom panel or prepare batch job and submit it.  There is no
way to just issue simple command from console.

With XDI, users or operators need not any extra activities to
transfer dataset file to certain remote system as long as the
destination already in effective XDITAB and the remote system is
PC or PC LAN running DOS or Windows.  The only activity needed is
just issue;

F XDI,SF,Destname,PCfilename,Datasetname

Destname is a valid registered destination name in the current
active XDITAB.  PCfilename is any valid PC file name (with file
type if necessary).   Datasetname is the name of dataset to be
transferred.  Users or operators do not worry about XDISP effect.
Even though XDISP=DELETE is in effect, XDI will override its to
KEEP for this job.






Chapter 8
XDI MESSAGES


XDI provides several messages to help users or operators monitor
and control it.  All XDI messages using the same format, follow
VM message format which more systematic than MVS.  XDI message
format is

CCCMMMnnnS Ttttttttt ttttttt tttttt tttttttttttt.

Where
? CCC is component identifier (currently 'DER')
? MMM is module identifier from which message issued
? nnn is message code 001 to 999
? S is message sign with 4 possible values are I = information,
  W = warning, E = error or R = need reply
? Tttttt is message text.

Some of I messages will not appear unless TRACE=ON specified in
XDISYS parameter.  This chapter explains all XDI messages
comprehensively.


8.1.  Variable Text Messages

Messages 001 to  061 are called variable text messages.  Their
text includes some variables which represent cases or problems
found at that time. All I messages are for trace purposes only,
need not any action.  Users need only concern to W and E
messages.

001I [Command|Parameter] &OBJECT completed
System:  Continue running.
User/Operator: None.

002W [Command|Parameter] &OBJECT was not completed, RC=cccc
System:  Continue running with improper operation.
User/Operator: Check &OBJECT and RC.  Reissue incomplete command
   or complete the parameter.   Stop XDI if necessary and restart
   again. If such message still occurs, call support engineer.

003E [Command|Parameter] &OBJECT error, RC=cccc
System:  Terminated.
User/Operator:  Check and analyze &OBJECT and RC.  Correct
   parameter or call support engineer if necessary.
011I SVC 99 [ALLOC|DEALLOC] of DSN completed
System:  Continue normal.
User/Operator: No action needed.

012W SVC 99 [ALLOC|DEALLOC] of DSN was not completed, EC=cc, IC=ii
System:  Continue with improper operation.
User/Operator: Check the DSN and its relation with ALLOC or
   DEALLOC and EC and IC.  Check also volume space configuration,
   even SMS definition.

013E SVC 99 [ALLOC|DEALLOC] of DSN error, EC=cccc, IC=iiii
System:  Continue with error condition.
User/Operator: Stop XDI and check the DSN and its relation with
   ALLOC or DEALLOC and EC and IC.  Check also volume space
   configuration, even SMS definition.  Call support engineer if
   necessary.

021I &TYPE &OBJECT found
System:  Continue normal.
User/Operator: No action needed.

022W &TYPE &OBJECT can not be found
System:  Continue with improper function.
User/Operator: Check &TYPE and &OBJECT and correct them.
   Refresh XDI.

023E &TYPE &OBJECT error, RC=cccc
System: Terminated or may be continue with improper function.
User/Operator: Check &TYPE , &OBJECT and RC, and correct them.
   Refresh XDI.  Call support engineer if necessary.

031I &TYPE of file &OBJECT completed
System:  Continue normal.
User/Operator: No action needed.

032W Unable to &TYPE file &OBJECT, RC=cccc
System:  Continue with improper function.
User/Operator: Check &TYPE , &OBJECT and RC, and correct them.
   It might  be related to RACF or ACF2.  Check with security
   administrator, then refresh XDI.  Call support engineer if
   necessary.

033E Error encountered during &TYPE file &OBJECT, RC=cccc
System: Terminated or may be continue with 122R.
User/Operator: Check &TYPE , &OBJECT and RC, and correct them. If
   message 122R attempted, reply 'RETRY'.  If message 122R still
   attempted, reply 'QUIT' and call support engineer.


041I &OBJECT found. &TYPE subsystem request completed
System:  Continue normal.
User/Operator: No action needed.

042W &OBJECT was not found. &TYPE subsystem returned RC=cccc
System:  Continue with message 122R.
User/Operator: Check &TYPE , &OBJECT and RC, and correct them. If
   message 122R attempted, reply 'RETRY'.  If message 122R still
   attempted, reply 'QUIT' and call support engineer.

043E Request rejected. &TYPE subsystem returned RC=cccc
System:  Continue with message 122R.
User/Operator: Check &TYPE , &OBJECT and RC, and correct them.
   Reply 'QUIT' to message 122R  and call support engineer.

051I &TYPE is &OBJECT and is &TEXT
System:  Continue normal.
User/Operator: No action needed.

061I &TYPE &OBJECT &TEXT
System:  Continue normal.
User/Operator: No action needed.



8.2.  Fixed Text Messages

Messages 100 to  188 are called fixed or static text messages.
Their text static represent predefined cases or problems. All I
messages are for trace purposes only, need not any action.  As
previously explained, users need only concern to W and E
messages.

100I XDI initialization in progress.
System:  Continue normal.
User/Operator: No action needed.

101I XDI extension module (WTX) invalid, XDI start up canceled.
System:  Continue normal.
User/Operator: No action needed.

102I XDI start up parameter is being checked.
System:  Continue normal.
User/Operator: No action needed.


103I XDI parameter is being checked.
System:  Continue normal.
User/Operator: No action needed.

104I XDI console interface is being initialized.
System:  Continue normal.
User/Operator: No action needed.

105I XDI initialization complete.
System:  Continue normal.
User/Operator: No action needed.

106I XDI-to-JES2 handshaking is being connected.
System:  Continue normal.
User/Operator: No action needed.

107I PARMLIB file is being read.
System:  Continue normal.
User/Operator: No action needed.

108W Invalid XDI parameter ignored.
System:  Continue running.
User/Operator: Check XDISYS parameter and correct them,
   then refresh XDI.

109I XDI parameter accepted and existing one will be overridden.
System:  Continue normal.
User/Operator: No action needed.

110I CMD parameter accepted and has been scheduled.
System:  Continue normal.
User/Operator: No action needed.

111I Attempt to call XIO routine ...
System:  Continue normal.
User/Operator: No action needed.

112I WTR processing complete ...
System:  Continue normal.
User/Operator: No action needed.

113I Attempt to wait for next sysout arrival.
System:  Continue normal.
User/Operator: No action needed.


114E No job found.
System:  Continue running.
User/Operator:  Check previous messages including related JES
   messages.  If found that sysout file deleted before its
   transferred to requeue class, thus it is operation mistake, then
   correct the operation procedure.  Otherwise, call support
   engineer.

115E Invalid search arguments.
System:  Continue with message 122R.
Users/operators:  Reply 'QUIT' and call support engineer.

116E Unpredictable error occurs.
System:  Continue with message 122R.
Users/operators:  Reply 'QUIT' and call support engineer.

117E Duplicate job name.
System:  Continue with message 122R.
Users/operators:  Reply 'QUIT' and call support engineer.

118E Invalid job name.
System:  Continue with message 122R.
Users/operators:  Reply 'QUIT' and call support engineer.

119E Invalid destination name.
System:  Continue with message 122R.
Users/operators:  Reply 'QUIT' and call support engineer.

120E Authorization failed.
System:  Continue with message 122R.
Users/operators:  Reply 'QUIT' and call support engineer.

121E Token map failed.
System:  Continue with message 122R.
Users/operators:  Reply "QUIT" and check JES and/or MVS
   maintenance level.  Correct them and call support engineer if
   necessary.

122R Enter 'W' to WAIT, 'R' to RETRY, or anything else to EXIT.
System:  Enter to wait state.
Users/operators:  Check previous messages, whether XDI or
   MVS/JES, then issue necessary reply.

123W Unknown interaction.
System:  Continue or issue message 122R.
Users/operators:  Check command or reply previously issued and
   reissue the correct one.


124I XDI stopped by operator.
System:  Continue normal.
User/Operator: No action needed.

125I Attempt to close all opened datasets.
System:  Continue normal.
User/Operator: No action needed.

126I PARMLIB dataset closed.
System:  Continue normal.
User/Operator: No action needed.

127I INTRDR closed.
System:  Continue normal.
User/Operator: No action needed.

128I SSI handshaking to JES2 disconnected.
System:  Continue normal.
User/Operator: No action needed.

129I XCOM-to-DISPATCH is being shut down.
System:  Continue normal.
User/Operator: No action needed.

130W DCB inform that sysout format neither ASA nor MCC.
System:  Continue running.
User/Operator: Check JES and/or MVS maintenance level.  Call XDI
   support engineer and IBM engineers if necessary.

131I DCB inform that sysout in ASA format.
System:  Continue normal.
User/Operator: No action needed.

132I DCB inform that sysout in MCC format.
System:  Continue normal.
User/Operator: No action needed.

133E Wrong format encountered.  Sysout is neither ASA nor MCC format.
System:  Continue running.
User/Operator: Check JES and/or MVS maintenance level.  Correct
   them and call XDI support engineer and IBM engineers if
   necessary.

134W Sysout then enforced to use S/390 standard format.
System:  Continue running.
User/Operator:  Such case occurs depend on LRECL parameter value
   specified in XDISYS.  To void it, specify LRECL=NORMAL.

135I Parameter is being initialized from parmlib member.
System:  Continue normal.
User/Operator: No action needed.

136I Now reviewing all parameters .....
System:  Continue normal.
User/Operator: No action needed.

137I Request has been sent to JES2 ....
System:  Continue normal.
User/Operator: No action needed.

138I JES2 SSI response is being evaluated ...
System:  Continue normal.
User/Operator: No action needed.

139W JES2 SSI response is negative, RC > 4 ...
System:  Continue with message 122R.
User/Operator: Reply "QUIT" and check JES and/or MVS maintenance
   level.  Correct them and call XDI support engineer as well as IBM
   engineers if necessary.

140W Unable to access JES2 SSI ECB due to SSREQ error ...
System:  Continue with message 122R.
User/Operator: Reply "QUIT" and check JES and/or MVS maintenance
   level.  Correct them and call XDI support engineer as well as IBM
   engineers if necessary.

141W Command incomplete, execution aborted.
System:  Continue normal.
User/Operator:  Check issued command and reissue the correct or
   complete one.

142I Going to sleep ..., next command should passed via MODIFY.
System:  Continue normal.
User/Operator: No action needed.

143I Intercepting IASXWR00 in progress ...
System:  Continue normal.
User/Operator: No action needed.

144E XDI failed, IASXWR00 was not intercepted.
No longer applicable.

145E IASXWR00 successfully intercepted.
No longer applicable.

146I Now is subsequent call, no reinitialization needed.
No longer applicable.

147E Process terminated due to serious error .
System:  Terminated.
User/Operator:  Check all previously related messages, whether
   XDI or MVS or JES.  Determine problems and call support
   engineer.

148E SYNAD of JES2FILE encountered, I/O terminated before EOF.
System:  Continue with incomplete result.
User/Operator:  Check all previously related messages, whether
   XDI or MVS or JES.  Stop XDI, determine problems and call
   support engineer.

149W Bad sysout will be dumped out.
System:  Purge sysout and continue normal.
User/Operator: No action needed.  It is procedure error.   Do not
   let unexpected sysout generated in XDI spool classes.

150W Bad sysout has been dumped out.
System:  Purge sysout and continue normal.
User/Operator: No action needed.  It is procedure error.   Do not
   let unexpected sysout generated in XDI spool classes.

151W Bad sysout has been handled using JES2 PURGE command.
System:  Purge sysout and continue normal.
User/Operator: No action needed.  It is procedure error.   Do not
   let unexpected sysout generated in XDI spool classes.

152I Dump process of bad sysout begin ...
System:  Continue normal.
User/Operator: No action needed.

153I Dump process of bad sysout finish ...
System:  Continue normal.
User/Operator: No action needed.

154I Bad sysout allocation done ...
System:  Continue normal.
User/Operator: No action needed.

155I Begin to transfer a block of bad sysout...
System:  Continue normal.
User/Operator: No action needed.


156I First block of bad sysout transferred ...
System:  Continue normal.
User/Operator: No action needed.

157I Sysout processing begin ...
System:  Continue normal.
User/Operator: No action needed.

158I Sysout dataset has been allocated.
System:  Continue normal.
User/Operator: No action needed.

159I Sysout dataset has been opened.
System:  Continue normal.
User/Operator: No action needed.

160I Sysout is being processed.
System:  Continue normal.
User/Operator: No action needed.

161I Sysout processing is almost finish.
System:  Continue normal.
User/Operator: No action needed.

162I Sysout dataset has been closed.
System:  Continue normal.
User/Operator: No action needed.

163I Sysout dataset has been deallocated.
System:  Continue normal.
User/Operator: No action needed.

164I Sysout processing finish.
System:  Continue normal.
User/Operator: No action needed.

165I Original SSOB captured.
System:  Continue normal.
User/Operator: No action needed.

166I SSSO found contiguous below SSOB.
No longer applicable.

167W Process routed to IEFSD087 due to SSOB error.
No longer applicable.

168I IEFSSREQ returned RC=0, we can take over all IASXWR00 efforts.
No longer applicable.

169I SSOB has been modified for next request..!
System:  Continue normal.
User/Operator: No action needed.

170I Input accepted, parameter has been updated.
System:  Continue normal.
User/Operator: No action needed.

171I XDI parameter library has been refreshed.
System:  Continue normal.
User/Operator: No action needed.

172I Destination table is being refreshed.
System:  Continue normal.
User/Operator: No action needed.

173I Destination table has been successfully refreshed.
System:  Continue normal.
User/Operator: No action needed.

174I Contact to SSI is being retried.
System:  Continue normal.
User/Operator: No action needed.

175I SSOB is being refreshed.
System:  Continue normal.
User/Operator: No action needed.

176W LRECL is more than 6233, process enforced to use standard
   S/390 format.
System:  Continue normal.
User/Operator: No action needed unless users want to force XDI
   produce normal result.  To do so, update XDISYS parameter with
   LRECL=NORMAL.

177I I/O processing from sysout to flat dataset is in progress ...
System:  Continue normal.
User/Operator: No action needed.

178I I/O processing of ASA formatted sysout is using PC/Dispatch
   format.
System:  Continue normal.
User/Operator: No action needed.

179I I/O processing of ASA formatted sysout is using PC/Windows
   format.
System:  Continue normal.
User/Operator: No action needed.

180I I/O processing of MCC formatted sysout is using PC/Dispatch
   format.
System:  Continue normal.
User/Operator: No action needed.

181I I/O processing of MCC formatted sysout is using PC/Windows
   format.
System:  Continue normal.
User/Operator: No action needed.

182I I/O processing of sysout is using S/390 standard format.
System:  Continue normal.
User/Operator: No action needed.

183I I/O processing from sysout to flat dataset is completed.
System:  Continue normal.
User/Operator: No action needed.

184W No OUTGRP provided, requeue canceled.
System:  Continue with unpredictable result.
User/Operator: Stop XDI and check JES and/or MVS maintenance
   level.  Call XDI support engineer and IBM engineers if
   necessary.

185W Writer name still not provided, use NONAME.'
System:  Continue normal.
User/Operator: No action needed.

186W Requeue does not work, sysout lost.
System:  Continue normal.
User/Operator: No action needed.  Such case usually caused by
   wrong operation procedure.  Correct the procedure if the case
   does not expected.

187E SSREQ rejected by SSI, sysout lost.
System:  Continue normal.
User/Operator: No action needed.  Such case usually caused by
   wrong operation procedure.  Correct the procedure if the case
   does not expected.

188E SSREQ rejected by JES, sysout lost.
System:  Continue normal.
User/Operator: No action needed.  Such case usually caused by
   wrong operation procedure.  Correct the procedure if the case
   does not expected.



